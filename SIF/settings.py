"""
Django settings for SIF project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import subprocess
from dotenv import load_dotenv
from datetime import timedelta

def load_encrypted_env():
    try:
        # Decrypt the .env.gpg file
        subprocess.run([
            'gpg', 
            '--quiet', 
            '--decrypt', 
            '.env.gpg'
        ], stdout=open('.env.temp', 'w'))
        
        # Load the decrypted contents
        load_dotenv('.env.temp')
        
        # Clean up the temporary file
        os.remove('.env.temp')
    except Exception as e:
        print(f"Error loading encrypted environment: {e}")
        # Fall back to regular .env if encryption fails
        load_dotenv()

# Load environment variables
load_encrypted_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = []


# Clockify API Key
CLOCKIFY_API_KEY = os.getenv('CLOCKIFY_API_KEY')

RECAPTCHA_SITE_KEY = os.getenv("RECAPTCHA_SITE_KEY")
RECAPTCHA_SECRET_KEY = os.getenv("RECAPTCHA_SECRET_KEY")

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # apps
    'users',
    'dashboard',
    'event',
    'clockify_integration',
    #style
    'widget_tweaks',
    #security
    'axes',
]

AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesBackend',      # üõ°Ô∏è Axes backend for brute-force protection
    'django.contrib.auth.backends.ModelBackend',
]
# Custom user model and authentication redirects
AUTH_USER_MODEL = 'users.CustomUser'

LOGIN_REDIRECT_URL = '/dashboard/' # ‚úÖ Where users land after login

LOGIN_URL = '/login/' # üîÅ Where unauthenticated users are sent

MIDDLEWARE = [
    'axes.middleware.AxesMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'SIF.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'dashboard.context_processors.forgot_password_requests_count',
            ],
        },
    },
]

WSGI_APPLICATION = 'SIF.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# üìÅ URL prefix for serving static files (CSS, JS, images)
STATIC_URL = 'static/'

# üõ†Ô∏è Tells Django where to find static files during development
# This includes your compiled Tailwind CSS (e.g. static/src/styles.css)
STATICFILES_DIRS = [
    BASE_DIR / "static",  # ‚úÖ Points to the global static folder at project root
]

# Email configuration for sending emails (e.g., password resets)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'           
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Django-Axes configuration
AXES_FAILURE_LIMIT = 5  # üö´ Lock out after 5 failed attempts
AXES_COOLOFF_TIME = timedelta(minutes=10)   # ‚è±Ô∏è 10-minute lockout
AXES_LOCKOUT_TEMPLATE = 'user/lockout.html'
AXES_ONLY_USER_FAILURES = True
AXES_LOCK_OUT_BY_COMBINATION_USER_AND_IP = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Media files (uploads): URL and root directory for user-uploaded content
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


